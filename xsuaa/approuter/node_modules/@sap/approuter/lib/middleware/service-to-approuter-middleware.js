'use strict';
var jwtDecode = require('jwt-decode');
var passportUtils = require('../passport/utils');
var xsenv = require('@sap/xsenv');
var xssec = require('@sap/xssec');

module.exports = function (req, res, next) {

  let auth = req.headers && req.headers['x-approuter-authorization'];

  if (!auth){
    return next();
  }
  var tracer = req.loggingContext.getTracer(__filename);
  tracer.info('Incoming request contains x-approuter-authorization header');

  delete req.headers['x-approuter-authorization'];

  var authArr = auth.split(' ');
  var type = authArr[0];
  var value = authArr[1];
  try {
    var token = value;
    var ownUAACredentials = xsenv.cfServiceCredentials({label: 'xsuaa'});
    xssec.createSecurityContext(token, ownUAACredentials, function (err) {
      if (err) {
        tracer.info('Token validation failed');
        return next(err, null);
      }
      if (type.toLowerCase() !== 'bearer') {
        tracer.info('x-approuter-authorization header is not a Bearer token');
        var error = new Error ('x-approuter-authorization header is not a Bearer token');
        error.status = 400;
        return next(error, null);
      }
      var tokenDecoded = jwtDecode(value);
      var tokenContext = {
        accessToken: value,
        expiresIn: Date.now() + 600000,
        scope: tokenDecoded.scope
      };
      var user = passportUtils.getUserProperties(tokenContext);

      req.session = {
        jwtRefreshStarted: true,
        user: user,
        req: req,
        reload: (cb) => { cb(); },
        save: () => {},
        touch: () => {}
      };
      tracer.info('Session created successfully');
      return next();

    });
  } catch (error) {
    tracer.info('service-to-approuter-middleware: failed');
    next (error);
  }
};

